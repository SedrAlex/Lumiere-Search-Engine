#!/usr/bin/env python3
"""
Copy TF-IDF Models to Query Processor Location
This script copies the TF-IDF models generated by the TF-IDF service to the location expected by the query processor.
"""

import os
import shutil
import joblib
from pathlib import Path

# Source paths (where TF-IDF service saves models)
TFIDF_SERVICE_MODEL_PATH = "/tmp/tfidf_model.joblib"
TFIDF_SERVICE_VECTORS_PATH = "/tmp/tfidf_vectors.joblib"

# Alternative source paths (pre-trained Antique models)
ANTIQUE_MODEL_PATH = "/tmp/tfidf_vectorizer.joblib"
ANTIQUE_MATRIX_PATH = "/tmp/tfidf_matrix.joblib"
ANTIQUE_METADATA_PATH = "/tmp/document_metadata.joblib"

# Destination paths (where query processor expects models)
MODEL_BASE_PATH = "/Users/raafatmhanna/Desktop/custom-search-engine/backend/models"
DEST_VECTORIZER_PATH = f"{MODEL_BASE_PATH}/tfidf_vectorizer.joblib"
DEST_MATRIX_PATH = f"{MODEL_BASE_PATH}/tfidf_matrix.joblib"
DEST_METADATA_PATH = f"{MODEL_BASE_PATH}/document_metadata.joblib"

def create_models_directory():
    """Create the models directory if it doesn't exist"""
    os.makedirs(MODEL_BASE_PATH, exist_ok=True)
    print(f"‚úÖ Created models directory: {MODEL_BASE_PATH}")

def copy_from_tfidf_service():
    """Copy models from TF-IDF service format"""
    try:
        if os.path.exists(TFIDF_SERVICE_MODEL_PATH) and os.path.exists(TFIDF_SERVICE_VECTORS_PATH):
            print("üìÅ Found TF-IDF service models, converting format...")
            
            # Load the service model
            service_data = joblib.load(TFIDF_SERVICE_MODEL_PATH)
            vectorizer = service_data['vectorizer']
            documents = service_data['documents']
            document_order = service_data['document_order']
            
            # Load the TF-IDF matrix
            tfidf_matrix = joblib.load(TFIDF_SERVICE_VECTORS_PATH)
            
            # Create metadata in the format expected by query processor
            metadata = []
            for doc_id in document_order:
                if doc_id in documents:
                    doc = documents[doc_id]
                    metadata.append({
                        'doc_id': doc_id,
                        'raw_text': doc.text,
                        'text': doc.text,
                        'length': len(doc.text)
                    })
            
            # Save in query processor format
            joblib.dump(vectorizer, DEST_VECTORIZER_PATH)
            joblib.dump(tfidf_matrix, DEST_MATRIX_PATH)
            joblib.dump(metadata, DEST_METADATA_PATH)
            
            print(f"‚úÖ Copied TF-IDF service models to {MODEL_BASE_PATH}")
            print(f"   - Vectorizer: {len(vectorizer.vocabulary_):,} features")
            print(f"   - Matrix shape: {tfidf_matrix.shape}")
            print(f"   - Documents: {len(metadata):,}")
            return True
            
    except Exception as e:
        print(f"‚ùå Error copying from TF-IDF service: {e}")
        return False

def copy_from_antique_models():
    """Copy pre-trained Antique models"""
    try:
        if (os.path.exists(ANTIQUE_MODEL_PATH) and 
            os.path.exists(ANTIQUE_MATRIX_PATH) and 
            os.path.exists(ANTIQUE_METADATA_PATH)):
            
            print("üìÅ Found pre-trained Antique models, copying...")
            
            # Copy files directly
            shutil.copy2(ANTIQUE_MODEL_PATH, DEST_VECTORIZER_PATH)
            shutil.copy2(ANTIQUE_MATRIX_PATH, DEST_MATRIX_PATH)
            shutil.copy2(ANTIQUE_METADATA_PATH, DEST_METADATA_PATH)
            
            # Verify the copied models
            vectorizer = joblib.load(DEST_VECTORIZER_PATH)
            tfidf_matrix = joblib.load(DEST_MATRIX_PATH)
            metadata = joblib.load(DEST_METADATA_PATH)
            
            print(f"‚úÖ Copied pre-trained Antique models to {MODEL_BASE_PATH}")
            print(f"   - Vectorizer: {len(vectorizer.vocabulary_):,} features")
            print(f"   - Matrix shape: {tfidf_matrix.shape}")
            print(f"   - Documents: {len(metadata):,}")
            return True
            
    except Exception as e:
        print(f"‚ùå Error copying Antique models: {e}")
        return False

def verify_models():
    """Verify that all required model files exist and are valid"""
    required_files = [
        DEST_VECTORIZER_PATH,
        DEST_MATRIX_PATH,
        DEST_METADATA_PATH
    ]
    
    print("\nüîç Verifying copied models...")
    
    all_valid = True
    for filepath in required_files:
        filename = os.path.basename(filepath)
        
        if os.path.exists(filepath):
            try:
                # Try to load the file to verify it's valid
                data = joblib.load(filepath)
                file_size = os.path.getsize(filepath) / (1024 * 1024)  # MB
                print(f"‚úÖ {filename}: {file_size:.2f} MB - Valid")
            except Exception as e:
                print(f"‚ùå {filename}: Invalid or corrupted - {e}")
                all_valid = False
        else:
            print(f"‚ùå {filename}: Not found")
            all_valid = False
    
    return all_valid

def main():
    """Main function to copy TF-IDF models"""
    print("üöÄ Copying TF-IDF Models for Query Processor")
    print("=" * 60)
    
    # Create models directory
    create_models_directory()
    
    # Try copying from TF-IDF service first
    success = copy_from_tfidf_service()
    
    # If that fails, try copying pre-trained Antique models
    if not success:
        success = copy_from_antique_models()
    
    # If still no success, show instructions
    if not success:
        print("\n‚ùå No TF-IDF models found!")
        print("\nüìã TO CREATE MODELS:")
        print("1. Start the TF-IDF service:")
        print("   python services/representation/tfidf_service.py")
        print("\n2. Index some documents using the service:")
        print("   curl -X POST http://localhost:8002/index \\")
        print("        -H 'Content-Type: application/json' \\")
        print("        -d '{\"documents\": [{\"id\": \"1\", \"text\": \"sample text\"}]}'")
        print("\n3. Run this script again:")
        print("   python copy_tfidf_models.py")
        print("\nAlternatively, run the setup_pretrained_models.py script to download pre-trained models.")
        return False
    
    # Verify the copied models
    if verify_models():
        print("\nüéâ SUCCESS!")
        print("‚úÖ All TF-IDF models are now available for the query processor")
        print(f"‚úÖ Models location: {MODEL_BASE_PATH}")
        print("\nüöÄ You can now start the TF-IDF query processor:")
        print("   python services/query_processing/tfidf_query_processor.py")
        return True
    else:
        print("\n‚ùå Model verification failed!")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
